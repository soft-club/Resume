generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  email
  github
  google
  openid
}

enum Visibility {
  public
  private
}

enum SubscriptionStatus {
  active
  canceled
  expired
  pending
}

model User {
  id               String   @id @default(cuid())
  name             String
  picture          String?
  username         String   @unique
  email            String   @unique
  locale           String   @default("en-US")
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         Provider
  secrets          Secrets?
  resumes          Resume[]
  subscriptions    Subscription[]
  transactions     Transaction[]
  paymeTransactions PaymeTransaction[]
  clickTransactions ClickTransaction[]
}

model Secrets {
  id                   String   @id @default(cuid())
  password             String?
  lastSignedIn         DateTime @default(now())
  verificationToken    String?
  twoFactorSecret      String?
  twoFactorBackupCodes String[] @default([])
  refreshToken         String?
  resetToken           String?  @unique
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
}

model Resume {
  id         String      @id @default(cuid())
  title      String
  slug       String
  data       Json        @default("{}")
  visibility Visibility  @default(private)
  locked     Boolean     @default(false)
  statistics Statistics?
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([userId, id])
  @@unique([userId, slug])
  @@index(fields: [userId])
}

model Statistics {
  id        String   @id @default(cuid())
  views     Int      @default(0)
  downloads Int      @default(0)
  resumeId  String   @unique
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([resumeId, id])
}

model SubscriptionPlan {
  id           String         @id @default(cuid())
  name         String
  description  String
  price        Float
  currency     String         @default("USD")
  duration     Int            // Duration in days
  features     Json           @default("{}")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id              String             @id @default(cuid())
  startDate       DateTime           @default(now())
  endDate         DateTime
  status          SubscriptionStatus @default(pending)
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId          String
  plan            SubscriptionPlan   @relation(fields: [planId], references: [id])
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  @@index(fields: [userId])
  @@index(fields: [planId])
}

enum TransactionStatus {
  pending
  completed
  failed
  refunded
}

model Transaction {
  id              String           @id @default(cuid())
  amount          Float
  currency        String           @default("USD")
  description     String
  status          TransactionStatus @default(pending)
  paymentMethod   String?
  paymentId       String?          // ID from payment provider
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index(fields: [userId])
}

model PaymeTransaction {
  id        String    @id @default(cuid())
  paymeId   String    @unique // ID от Payme
  time      Int       // Время создания транзакции (unix timestamp)
  amount    Float     // Сумма в UZS
  state     Int       // Состояние транзакции (1: создана, 2: выполнена, -1: отменена, -2: отменена после выполнения)
  reason    Int?      // Причина отмены (1: возврат пользователя, 2: системный возврат, 3: ошибка платежа)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String    // ID пользователя
  
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([paymeId])
}

model ClickTransaction {
  id              String    @id @default(cuid())
  clickTransId    String    // ID транзакции от Click
  clickPaydocId   String    // ID платежного документа от Click
  merchantTransId String    // ID транзакции продавца
  amount          Float     // Сумма в UZS
  state           Int       // Состояние транзакции (0: создана, 2: выполнена, -1: отменена)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String    // ID пользователя
  
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([clickTransId])
}
